#+TITLE: Simple Org Wiki 만들기
#+DATE: <2020-11-02 Mon>


* DONE 의도
  CLOSED: [2020-11-02 Mon 14:28]
  1) org 링크를 만드는 것이 더 쉬웠으면 좋겠다고 생각했다.
     1) org link만으로 만족하고 쓸만한 위키이니까.
  2) 문서들을 조직하고 정리하는 방법이 더 느슨했으면 했다.
     1) 마인드맵, 위키, 카테고리 방식과 같은 직접 연결된 문서이나
        디렉토리 계층과 같은, 1:n 구조만이 아니라,
     2) 그냥 각 문서가 직접 링크나 언급이 아예 없어도, 같은 "태그"를
        갖는 것만으로 연관이 생겼으면 좋겠다고 생각했다.

** 어째서
   책을 쓰든, 오랬동안 진행되는 회사를 만들 프로젝트를 하건, 또 그런
   와중에 계속해서 생각나는 아이디어들이 있든, 결국엔 knowledge base을
   제대로 만들어야 한다는 생각이 들었다.

   책을 쓰기 위해서, 계속해서 글을 적어놓고, 그 글들을 조직하기
   위해서는 어느 정도 다시 찾아볼 수 있을 방식이 있어야 한다.

   진행되는 프로젝트에 대해서도 마찬가지. 매일 매일 어떤 상황이고
   무엇을 해야 하는지를 각 프로젝트별로 정리하고 기록해 놓았는데, 큰
   흐름에서 정리할 방법이 없었어서.

   계속해서 아이디어들이 떠오르는데, 메모를 하고 노트에 적어놓거나
   하고 그냥 놓치는 것 같아서.

** 대안들에 대한 생각   
   1) org-roam 등은 너무 사용하지 않는 기능이 많은 것 같아서.
   2) hyperbole은 도대체 뭘 하려고 하는지, 어떻게 설정하고 쓰는지 알기
      어려워서.


* TODO 링크 만들기, 링크 할 파일을 검색하기                         :feature:
  1) 하위디렉토리 검색.
     1) projectile, fuzzy matching.
  2) 링크의 이름?
     1) 선택한 transient 영역을 사용.
     2) transient 없으면, ~#+TITLE:~ 이나 파일이름으로.

* TODO (A) 특정 tag, tag-set에 대해 속하는 문서 검색 리스팅하기     :feature:
  1) ex: ~#+TAGS[]: a b c~
  2) 리스팅 버퍼, 정렬기준변경/재정렬, 타이틀 표시, 열기 링크.

* TODO (B) tag-set 리스팅하기                                       :feature:
  1) 하위 디렉토리의 모든 문서에서 tag셋 모아서 리스팅.
  2) 태그, 속하는 문서 카운팅, 정렬기준변경/재정렬.
  3) org-ql으로 검색, sqlite3이나 dbm등으로 홈디렉토리이나
     ~$HOME/.emacs.d/~ 에 캐싱.

* TODO (C) 문서에 태그 추가, 삭제하기                               :feature:
  1) "(B) tag-set 리스팅하기"의 목록을 구해서(캐싱하거나).
  2) fuzzy matching으로 추가, 삭제.


* DONE sqlite3 api? dbm?
  CLOSED: [2020-11-02 Mon 14:28]
  1) https://github.com/pekingduck/emacs-sqlite3-api
     1) org-roam에서도 이걸 썼었던 것 같다.
     2) c api을 wrapper을 빌드해서 설치하는 듯.
     3) sqlite3 / melpa.
  2) https://github.com/cireu/emacsql-sqlite3
     1) 이건 sqlite3 cli을 쓰는 것 같은데,
     2) 조금 뭔지 closql 같은 것을 써서 모르겠어서 무시하기로.
  3) 다른 dbm이나 tokyo-cabinet 같은 것들에 대해서는 elpa, melpa에서
     패키지가 없으니 없다고 생각하자.


* DONE org-link의 protocol을 추가하기? -- org-wiki-server이 가능해지도록?
  CLOSED: [2020-11-02 Mon 14:19]
  1) <2020-11-02 Mon> 아직은 확장할 방법을 잘 모르겠는데.
  2) 그리고 혹여 org-wiki-server을 만들더라도 그냥 파일/디렉토리에
     org파일을 모아 놓은 것보다 여러모로 부자연스러울 것 같아서.
     1) 링크를 선택하기 복잡할 것 같다. -- 추가적인 해킹.
     2) 링크를 열기 -- 마찬가지.
     3) Git등으로 간단히 sync와 resolving-conflict이 가능한 것에
        비해서 더 복잡해질 동시성 모델

* TODO ~#+TAGS[]:~ 을 org-ql으로 읽기? 쓰기? [0/3]                 :question:
  1) [ ] 태그 목록을 읽을 수 있어야 하고.
  2) [ ] (태그 목록이 없다면) org파일에 추가 할 수 있어야 하고.
  3) [ ] (있다면) 그 목록에 태그를 추가/삭제 할 수 있어야.

** TODO org-ql? org-ml! [0/2]
   1) org-ql으로 얻을 수 있을 것 같았는데,
      1) 얻기는 얻으나, 별로.
   2) 그래서 org-ml으로 다시 시도.
      #+begin_src emacs-lisp
        (org-ml-parse-section-at -1)

         (section (:begin 1 :end 106 :contents-begin 1 :contents-end 104 :post-blank 2 :post-affiliated 1 :parent nil)
                  (keyword (:key "TITLE" :value "TITLE_THIS"
                                 :begin 1 :end 21 :post-blank 0 :post-affiliated 1 :parent #0))
                  (keyword (:key "DATE" :value "2020-10-20 00:00:00+09:00"
                                 :begin 21 :end 55 :post-blank 0 :post-affiliated 21 :parent #0))
                  (keyword (:key "CATEGORIES[]" :value "a-category"
                                 :begin 55 :end 82 :post-blank 0 :post-affiliated 55 :parent #0))
                  (keyword (:key "TAGS[]" :value "tag_a tag_b"
                                 :begin 82 :end 104 :post-blank 0 :post-affiliated 82 :parent #0)))
      #+end_src

      1) https://github.com/ndwarshuis/org-ml

   3) [ ] 이제 이 list에서 {:key == "TAGS[]"} 얻기는?

   4) [ ] 그리고 {:key == ...} 수정하기는?
